# -*- coding: utf-8 -*-
"""mediapipe_pose.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XeV5WiCD4TNuY47Y3su3ziGyD1hWOVS7

Usage example of MediaPipe Pose Solution API in Python (see also http://solutions.mediapipe.dev/pose).
"""

!pip install mediapipe

from google.colab import drive

drive.mount('/content/gdrive')

"""Upload any image that that has a person with visible upper body to the Colab. We take two example images from the web: https://unsplash.com/photos/4jqfc2vbHJQ and https://unsplash.com/photos/72zsd_fnxYc

"""

from google.colab import files

uploaded = files.upload()

import cv2
from google.colab.patches import cv2_imshow
import numpy as np

# Read images with OpenCV.
images = {name: cv2.imread(name) for name in uploaded.keys()}

# Preview the images.
#for name, image in images.items():
  #print(name)   
  #cv2_imshow(image)

"""All MediaPipe Solutions Python API examples are under mp.solutions.

For the MediaPipe Pose solution, we can access this module as `mp_pose = mp.solutions.pose`.

You may change the parameters, such as `static_image_mode` and `min_detection_confidence`, during the initialization. Run `help(mp_pose.Pose)` to get more informations about the parameters.
"""

import mediapipe as mp
mp_pose = mp.solutions.pose

# help(mp_pose.Pose)

# Prepare DrawingSpec for drawing the face landmarks later.
mp_drawing = mp.solutions.drawing_utils 
drawing_spec = mp_drawing.DrawingSpec(thickness=1, circle_radius=1)

count = 0
with mp_pose.Pose(
    static_image_mode=True, min_detection_confidence=0.5, model_complexity=2) as pose:
  for name, image in images.items():
    # Convert the BGR image to RGB and process it with MediaPipe Pose.
    results = pose.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    # Print nose landmark.
    image_hight, image_width, _ = image.shape
    if not results.pose_landmarks:
      continue
    print(
      f'Nose coordinates: ('
      f'{results.pose_landmarks.landmark[mp_pose.PoseLandmark.NOSE].x * image_width}, '
      f'{results.pose_landmarks.landmark[mp_pose.PoseLandmark.NOSE].y * image_hight})'
    )

    # Draw pose landmarks.
    print(f'Pose landmarks of {name}:')
    annotated_image = image.copy()
    mp_drawing.draw_landmarks(
        image=annotated_image,
        landmark_list=results.pose_landmarks,
        connections=mp_pose.POSE_CONNECTIONS,
        landmark_drawing_spec=drawing_spec,
        connection_drawing_spec=drawing_spec)
    cv2.imwrite("/content/gdrive/My Drive/Colab Notebooks/image_result_capture/w_result%d.jpg" %count, annotated_image)
    count += 1
    cv2_imshow(annotated_image)

